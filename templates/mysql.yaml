apiVersion: v1
kind: Service
metadata:
  name: mysql-svc
  labels:
    dep: mysql-svc
spec:
  type: NodePort
  ports:
    - port: 3306
      targetPort: mysql-port
      nodePort: 33061
  selector:
    app: mysql-pod
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: zhitu-mysql-pv
spec:
  capacity:
    storage: {{ .Values.mysqlvolumespace }}
  accessModes:
  - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: zhitu-mysql-volume
  nfs:
    path: {{ .Values.mysqlvolumepvpath }}
    server: {{ .Values.volumeserver }}
---
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: zhitu-mysql-volume
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-claim
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.mysqlvolumespace }}
  storageClassName: zhitu-mysql-volume
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysqldep
  labels:
    app: mysqldep
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql-pod
  template:
    metadata:
      labels:
        app: mysql-pod
    spec:
      containers:
        - name: mysql-pod
          image: {{ .Values.mysqlimage }}
          imagePullPolicy: IfNotPresent
          env:
            - name: "MYSQL_ROOT_PASSWORD"
              value: {{ .Values.mysqlrootpasswd | quote }}
          ports:
            - name: mysql-port
              containerPort: 3306
          volumeMounts:
            - mountPath: "/var/lib/mysql"
              name: mysqldb
            - name: mysqldcnf
              mountPath: /etc/mysql/mysql.conf.d/mysqld.cnf
              subPath: mysqld.cnf
      volumes:
        - name: mysqldb
          persistentVolumeClaim:
            claimName: mysql-claim
        - name: mysqldcnf
          configMap:
            name: mysqldcnf
            items:
              - key: mysqldcnf-config
                path: mysqld.cnf


